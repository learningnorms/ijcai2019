package norms;


import java.util.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Created by XXX on 8/14/18.
 */
public class IndexedDSFrame {

    private static final Logger log = LogManager.getLogger(IndexedDSFrame.class);

    // antecedent --> attribute_1, antecedent --> attribute_2, ...

    private DSFrame dsframe;
    private String frameName; // Just the antecedent
    private List<String> attributes;
    private long frameId;
    private Map<String,List<String>> rulesMap; // maps an attribute name to the specific proposition in the frame
    private static long count=0L;

    //****************** CONSTRUCTORS ************************************//
    /**
     * Constructor. Given an antecedent and a set of possible consequents
     * @param antecedent
     * @param attributes
     */
    public IndexedDSFrame(String antecedent, List<String> attributes){
        this.frameName = antecedent;
        this.attributes = attributes;
        initialize(this.attributes);
        this.frameId = ++count;
    }
    //**********************************************************************//



    //****************** BASIC GETTERS ************************************//
    public DSFrame getDsframe(){
        return this.dsframe;
    }

    public String getFrameName(){
        return this.frameName;
    }

    public long getFrameId(){
        return this.frameId;
    }

    public List<String> getAttributes(){
        return this.attributes;
    }

    public Map<String,List<String>> getRulesMap(){
        return this.rulesMap;
    }
    //**********************************************************************//


    //****************** DS-FRAME OPERATIONS ************************************//
    public double getRuleBel(String attribute){
        // Lookup rules map for the attribute
        List<String> proposition = this.rulesMap.get(attribute);
        double bel = this.dsframe.getBelief(proposition);
        return bel;
    }

    public double getRulePl(String attribute){
        // Lookup rules map for the attribute
        List<String> proposition = this.rulesMap.get(attribute);
        double pl = this.dsframe.getPlausibility(proposition);
        return pl;
    }

    public void updateFrame(Map<String,Boolean> attributeValuePairs, double mass, double newEvidenceWeight){
        // Create a string 10010 for this map. Remember attributes could be out of order

        StringBuilder bitStr = new StringBuilder();
        for (String attribute : this.attributes){
            if(attributeValuePairs.containsKey(attribute)){
                if(attributeValuePairs.get(attribute)){
                    bitStr.append("1");
                } else {
                    bitStr.append("0");
                }
            } else {
                bitStr.append("e");
            }
        }
        String bits = bitStr.toString();
        List<String> conditioningEvent = new ArrayList<>();
        if (bits.contains("e")) {

            getIgnorancePossibilities(bits,conditioningEvent);
        } else {
            conditioningEvent.add(bits);
        }

//        System.out.println("Conditioning Event = "+conditioningEvent);
//        System.out.println("in(): "+this.dsframe.getIn(conditioningEvent));
//        System.out.println("OUT(): "+this.dsframe.getArbUnion(this.dsframe.getOut(conditioningEvent)));
//        System.out.println("Conditional Core (before): "+this.dsframe.getConditionalCore(conditioningEvent));
//        System.out.println("Core (before): "+this.dsframe.getCore());


        DSFrame newFrame = new DSFrame(this.dsframe.getSingletons());
        newFrame.clearMasses();
        newFrame.setMass(conditioningEvent,mass);

        this.dsframe.evidenceUpdate(newFrame,conditioningEvent,newEvidenceWeight);
//        System.out.println("Conditional Core: "+this.dsframe.getConditionalCore(conditioningEvent));
//        System.out.println("Core: "+this.dsframe.getCore());


    }
    //**********************************************************************//

    /**
     * Sets the DSFrame based on the attributes, sets rules.
     * The idea is to elaborate the list of attributes to all possible combinations of itself
     * and its negations.
     * @param attributes
     */
    private void initialize(List<String> attributes){
        // Initialize DSFrame
        List<String> singletons = extractHypotheses(attributes);
        this.dsframe = new DSFrame(singletons);
        this.dsframe.setMass(singletons,1.0); // Vacuous mass function

        // Sets the rules.
        this.rulesMap = new HashMap<>();
        for (int i = 0; i < attributes.size(); i++){
            // For each attribute, get the proposition that corresponds to the rule.
            List<String> prop = getRuleProposition(attributes.get(i),attributes);
            this.rulesMap.put(attributes.get(i),prop);
        }
    }

    /**
     * Returns a proposition (list of singletons), where each singleton is off the form "10010"
     * The returned proposition corresponds to a rule proposition.
     * @param attribute
     * @param attributes
     * @return
     */
    private List<String> getRuleProposition(String  attribute, List<String> attributes){
        // Generate a string of n "e"s. Where n is the size of the attribute list
        String eStr = String.join("", Collections.nCopies(attributes.size(), "e"));

        // Replace the one character at position
        int pos = attributes.indexOf(attribute);
        String updatedEStr = replaceCharAt(eStr,pos,'1');

        List<String> proposition = new ArrayList<>();
        getIgnorancePossibilities(updatedEStr,proposition);

        return proposition;
    }

    /**
     * Given some set of n attributes, the idea is to extract 2^n singletons for the frame.
     * Singeletons are named after the corresponding bitset e.g., 000110100  of length n
     * @param attributes
     * @return
     */
    private List<String> extractHypotheses(List<String> attributes){
        int  n = attributes.size();
        List<String> hypos = new ArrayList<>();
        for (int i = 0; i < Math.pow(2, n); i++) {
            String bin = Integer.toBinaryString(i);
            while (bin.length() < n) {
                bin = "0" + bin; // adding leading zeros if necessary
            }
            hypos.add(bin);
        }
        return hypos;
    }

    /**
     * This method basically lists out possible dataline strings when there is ignorance.
     * For example "10e0" could represent "1010" or "1000" as the e = 0,1.
     * So this method will return a list [1010,1000]
     * This method ASSUMES there is at least one "e" in dataline.
     * @param dataLine
     * @return
     */
    private void getIgnorancePossibilities(String dataLine, List<String> dataLineStr) {

        // Counts the number of "e"s in the dataline.
        int eCount = 0;
        for (int i = 0; i < dataLine.length(); i++) {
            if (dataLine.charAt(i) == 'e') {
                eCount++;
            }
        }
        // base case: if eCount is zero, then you're done.
        if (eCount == 0) {
            return;
        } else {
            // extract index of the first e
            int eIndex = dataLine.indexOf('e');
            String dataLine1 = replaceCharAt(dataLine, eIndex, '1');
            String dataLine0 = replaceCharAt(dataLine, eIndex, '0');
            if (eCount == 1) {
                dataLineStr.add(dataLine1);
                dataLineStr.add(dataLine0);
            }
            getIgnorancePossibilities(dataLine1, dataLineStr);
            getIgnorancePossibilities(dataLine0, dataLineStr);
        }
    }

    private String replaceCharAt(String s, int pos, char c) {
        return s.substring(0, pos) + c + s.substring(pos + 1);
    }

}